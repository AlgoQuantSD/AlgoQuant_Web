import json
import boto3

from decimal import Decimal

"""
A custom JSONEncoder that converts Decimal() function to string.
"""
class decimal_encoder(json.JSONEncoder):
    def default(self, obj):

        # If obj(value) is Decimal object
        if isinstance(obj, Decimal):
            return str(obj)
        
        # Else use the JSONEncoder's default functionality
        return json.JSONEncoder.default(self, obj)

def lambda_handler(event, context):
    
    print(event['requestContext'])
    
    # .resources is an object-oriented interface to AWS. They provide a 
    # higher-level abstraction than the raw, low-level calls made by .client
    dynamodb = boto3.resource('dynamodb')
    
    # Declaring table object
    user_table = dynamodb.Table('user')
    
    try:

        # Location of requested object
        request_body = event['requestContext']
        print(type(request_body))
        
        # Converts the JSON string into a Python dictionary
        # json_body = json.loads(request_body)
        user_id = request_body['authorizer']['jwt']['claims']['username']
        print("userid")
        print(type(user_id))
        # Get instance of user from user table in DynamoDB
        user = user_table.get_item(
          Key = {
              "user_id": user_id
          }
        )
        print("before")
        print(user)
        # Converts the python dictionary into a serialized JSON object. 
        # Decimal() can't be serialized by default and must be converted 
        # manually 
        print(type(user))
        user = json.dumps(user, cls = decimal_encoder)
        print(user)

        return {
            'statusCode': 200,
            'body': user
        }
        
    except Exception as e:
        print(f"ERROR: {e}")
        return {
            'statusCode': 400,
            'body': {'message': 'Failed to get user'}
        }